//============================================================================
// Name        : scheduler.cpp
// Author      : YoucefKhaled
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <stdlib.h>
#include <vector>
#include <iterator>

#include <libnova/libnova.h>

#include "../Model/Observation.h"
#include "../Model/Schedule.h"
#include "../Model/Request.h"
#include "../Model/Target.h"

#include "../genethic_algorithm/chromosome.h"
#include "../genethic_algorithm/gene.h"
#include "../genethic_algorithm/population.h"

#include <algorithm>

using namespace std;

struct obj_fct_comp {

	obj_fct_comp(int dim):obj_fct(dim) {};
	bool operator()(chromosome c1, chromosome c2){

			return (c1.get_obj_func(obj_fct) < c2.get_obj_func(obj_fct));
		}
int obj_fct;
};

int main() {

//	Target vega(279.2347, 38.7836);
//	Target kochab(222.676375, 74.1555);
//	ln_equ_posn * pos = new ln_equ_posn();
//	pos = vega.getEqCord();
//	cout << kochab.getAngularDistance(pos) << endl;

	Schedule * sched = new Schedule();

	sched->randomObservationListGenerator(3);

	cout << "Initializing the population..." << endl;

	population * p = new population(3, *sched);
//
//	cout << "Population initialized..." << endl;
//
//	p->check_init();
//
//	p->get_individual(0).compute_constraints();
//
//	cout << p->get_individual(0).get_cst_val(0);

//	sched->checkObservations();



	chromosome * ch = new chromosome(*sched->getObs());

	cout << "fknfi," << endl;


	//ch->checkObservations();
	ch->compute_obj_func();

	/*cout << "fknfi," << endl;
	cout << fixed << ch->get_obj_func(0) << endl;
	cout << fixed << ch->get_obj_func(1) << endl;
	cout << fixed << ch->get_obj_func(2) << endl;
	cout << fixed << ch->get_obj_func(3) << endl;*/
	std::vector<chromosome> front ;
	for(int i =0; i < p->get_size();i++)
	{
		front.push_back(p->get_individual(i));
	}
	obj_fct_comp f(0);
	cout<< f.obj_fct<<endl;
	cout <<"si obj_fct égale 0"<< front[0].get_obj_func(f.obj_fct) << "	"<< front[0].get_obj_func(0)<<endl;
	for(int y =0; y < front.size(); y++)
	{
		cout<<"I am individual 0 and here are my component:"<< front[y].get_cst_val(0) << "	"<< front[y].get_obj_func(0)<<endl;
	}

	sort(front.begin(),front.end(),f);
	for(int y =0; y < front.size(); y++)
		{
		cout<<"I am individual new 0 and here are my component:"<< front[y].get_cst_val(0) << "	"<< front[y].get_obj_func(0)<<endl;
		}

	//p->update_crowding_dist(front);
	//cout << front[0].getCrowdingDist();
	//front[0].incrementDomCount();
	//cout<< "après increment"<<  front[0].getCrowdingDist() <<endl;
	int x = 1458;
	cout<< "taille de pop	"<< front.size()<<endl;



//
//	Target RigilKentaurus(219.8795833, -60.81952778);
//
//	Target * Aldebaran = new Target(68.98041667, 16.50841667);

	return 0;
}

