//============================================================================
// Name        : scheduler.cpp
// Author      : YoucefKhaled
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <stdlib.h>
#include <vector>
#include <iterator>

//#include <julian_day.h>
//#include <solar.h>
//#include <rise_set.h>
#include <libnova/libnova.h>

#include <pagmo.h>
#include <config.h>
#include <serialization.h>
#include <types.h>
#include <problem/base.h>

#include "../Model/Observation.h"
#include "../Model/Schedule.h"
#include "../Model/Request.h"

#include "../genethic_algo/SchedulingProb.h"


using namespace std;

struct new_type{

	int bla;
	int bli;
};

int main() {

//	Schedule * sched = new Schedule();
//	sched->randomObservationAllocation();
	//cout << sched->getObservations().at(0).getReqTime().start << endl;

	Request request(0);
	int obs_length = 1;
	int period = 0;

	srand(time(NULL));
	double multi_obs = (double) rand() / (double) RAND_MAX;
	if( multi_obs < PERIODIC_RATIO ){

		obs_length = rand() % MAX_OBS_REQ;
		period = (rand() % MAX_PERIOD) + MIN_PERIOD;
	}

	ln_date * t = new ln_date();
	t->seconds = period;

	request.setLength(obs_length);
	request.setPeriod(ln_get_julian_day(t));

	//Generating priority
	request.setPriority((int) (rand() % MAX_PRIO) + 1.0 / 10.0);

	//generating observations
	//...

	cout << request.getPriority() << endl;
	cout << request.getPeriod() << endl;
	cout << request.getLength() << endl;

	return 0;
}
