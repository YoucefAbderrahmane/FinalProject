/*
 * test.cpp
 *
 *  Created on: 2 ao√ªt 2016
 *      Author: root
 */

#include <node/node.h>
#include <node/v8.h>

#include "../Model/Observation.h"

namespace demo {

//using v8::Exception;
//using v8::Number;
using v8::Function;
using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
//using v8::Null;
using v8::Object;
using v8::String;
using v8::Value;


void RunCallback(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = args.GetIsolate();
  Local<Function> cb = Local<Function>::Cast(args[0]);
  const unsigned argc = 1;
  Local<Value> argv[argc] = { String::NewFromUtf8(isolate, "hello world") };
  cb->Call(Null(isolate), argc, argv);
}

void Init(Local<Object> exports, Local<Object> module) {
  NODE_SET_METHOD(module, "exports", RunCallback);
}

//void Method(const FunctionCallbackInfo<Value>& args) {
//  Isolate* isolate = args.GetIsolate();
//  args.GetReturnValue().Set(String::NewFromUtf8(isolate, "world"));
//}



//// This is the implementation of the "add" method
//// Input arguments are passed using the
//// const FunctionCallbackInfo<Value>& args struct
//void Add(const FunctionCallbackInfo<Value>& args) {
//  Isolate* isolate = args.GetIsolate();
//
//  // Check the number of arguments passed.
//  if (args.Length() < 2) {
//    // Throw an Error that is passed back to JavaScript
//    isolate->ThrowException(Exception::TypeError(
//        String::NewFromUtf8(isolate, "Wrong number of arguments")));
//    return;
//  }
//
//  // Check the argument types
//  if (!args[0]->IsNumber() || !args[1]->IsNumber()) {
//    isolate->ThrowException(Exception::TypeError(
//        String::NewFromUtf8(isolate, "Wrong arguments")));
//    return;
//  }
//
//  // Perform the operation
//  double value = args[0]->NumberValue() + args[1]->NumberValue();
//  Local<Number> num = Number::New(isolate, value);
//
//  // Set the return value (using the passed in
//  // FunctionCallbackInfo<Value>&)
//  args.GetReturnValue().Set(num);
//}
//
//void init(Local<Object> exports) {
//  NODE_SET_METHOD(exports, "add", Add);
//}

NODE_MODULE(test, Init)

}
