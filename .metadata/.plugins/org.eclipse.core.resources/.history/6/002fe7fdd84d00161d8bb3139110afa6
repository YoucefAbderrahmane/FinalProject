/*
 * population.cpp
 *
 *  Created on: 16 juil. 2016
 *      Author: root
 */

#include "population.h"
#include <time.h>
#include "../Model/config.h"

population::population(int population_size, Schedule schedule) : individuals(), population_size(population_size),
		champion(), schedule(schedule)
{
	// TODO Auto-generated constructor stub
	this->individuals.resize(population_size);

}

population::population(std::vector<chromosome> individuals, int population_size) : individuals(individuals),
		population_size(population_size), champion()
{
	// TODO Auto-generated constructor stub
	this->individuals = individuals;
}

population::~population() {
	// TODO Auto-generated destructor stub
}

void population::init() {

	srand(time(NULL));

	//initialize all individuals of the population
	for(std::vector<chromosome>::size_type i = 0; i < individuals.size(); i++){

		init_individual(i);
	}
}

void population::init_individual(int index) {

	//initialize the genes of the chromosome
	for(std::vector<gene>::size_type i = 0; i < individuals[index]->genes.size(); i++){

		individuals[index] = new chromosome(schedule.getObs());
		init_gene(i, index);
	}
}

void population::init_gene(int gene_index, int individual_index) {

	double inf = 0.0;	//the lower bound for the random number
	double sup = 0.0;	//the upper bound for the random number
	double range = 0.0; //needs to be equal to: sup - inf
	double div = 0.0;	//the divisor needed to generate a random number

	//generate the probability of selecting the observation
	sup = 1.0;
	range = sup - inf;
	div = RAND_MAX / range;
	individuals[individual_index]->genes[gene_index].random_selection = inf + rand() / div;

	//generate a random start date within the night horizon
	inf = schedule.getConditions()->getNightHorizon().start;
	sup = schedule.getConditions()->getNightHorizon().end;
	range = sup - inf;
	div = RAND_MAX / range;
	individuals[individual_index]->genes[gene_index].start_date = inf + rand() / div;
	individuals[individual_index]->genes[gene_index].get_end_time();

	//randomly chose the allocated telescope
	int low = 1;
	int up = N_TELESCOPE;
	range = sup - inf;
	div = RAND_MAX / range;

}
