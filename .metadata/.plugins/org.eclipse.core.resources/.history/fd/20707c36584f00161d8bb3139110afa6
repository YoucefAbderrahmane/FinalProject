/*
 * population.cpp
 *
 *  Created on: 16 juil. 2016
 *      Author: root
 */

#include "population.h"
#include "../utilities/comparators.h"
#include <time.h>
#include "../Model/config.h"

population::population(int population_size, Schedule schedule) : individuals(), population_size(population_size),
		champion(), schedule(schedule)
{
	// TODO Auto-generated constructor stub

	this->individuals.resize(population_size);
	init();
}

population::population(std::vector<chromosome *> individuals, int population_size) : individuals(individuals),
		population_size(population_size), champion()
{
	// TODO Auto-generated constructor stub
	this->individuals = individuals;
}

population::~population() {
	// TODO Auto-generated destructor stub
}

void population::init() {

	srand(time(NULL));

	//initialize all individuals of the population
	for(std::vector<chromosome>::size_type i = 0; i < individuals.size(); i++){

		init_individual(i);
	}
}

void population::init_individual(int index) {

	individuals[index] = new chromosome(schedule.getObs());

	//initialize the genes of the chromosome
	for(std::vector<gene>::size_type i = 0; i < individuals[index]->genes.size(); i++){

		init_gene(i, index);
	}
}

void population::init_gene(int gene_index, int individual_index) {

	double inf = 0.0;	//the lower bound for the random number
	double sup = 0.0;	//the upper bound for the random number
	double range = 0.0; //needs to be equal to: sup - inf
	double div = 0.0;	//the divisor needed to generate a random number

	//generate the probability of selecting the observation
	sup = 1.0;
	range = sup - inf;
	div = RAND_MAX / range;
	individuals[individual_index]->genes[gene_index].random_selection = inf + rand() / div;

	//generate a random start date within the night horizon
	inf = schedule.getConditions()->getNightHorizon().start;
	sup = schedule.getConditions()->getNightHorizon().end;
	range = sup - inf;
	div = RAND_MAX / range;
	individuals[individual_index]->genes[gene_index].start_date = inf + rand() / div;
	individuals[individual_index]->genes[gene_index].duration = schedule.getObs()->at(gene_index).getDuration();

	//randomly chose the allocated telescope
	int low = 1;
	int up = N_TELESCOPE;
	individuals[individual_index]->genes[gene_index].telescope_used = rand() % up + low;

}

void population::check_init() {

	//randomly picking an individual from the population
	int i = rand() % individuals.size();

	//check the first, last and a random gene
	check_gene(0, i);

	std::cout << std::endl;
	std::cout << std::endl;

	int gene = rand() % individuals[0]->genes.size();
	check_gene(gene, i);

	std::cout << std::endl;
	std::cout << std::endl;

	gene = individuals[i]->genes.size() - 1;
	check_gene(gene, i);

	std::cout << std::endl;
	std::cout << std::endl;
}

chromosome * population::get_individual(int ind_index) {

	return individuals[ind_index];
}

void population::repair(chromosome * individual) {

	if( individual->get_cst_val(0) == 1.0 ){

		std::vector<gene> genes_copy = individual->genes;

		std::sort(genes_copy.begin(), genes_copy.end(), gene_less_comp());
	}
}

void population::check_gene(int gene_idx, int individual_idx) {

	std::cout << "Gene: " << gene_idx << std::endl;
	std::cout << "Gene's selection probability: " << individuals[individual_idx]->genes[gene_idx].random_selection << std::endl;
	std::cout << "Gene's start time: " << fixed << individuals[individual_idx]->genes[gene_idx].start_date << std::endl;
	std::cout << "Gene's allocated telescope: " << individuals[individual_idx]->genes[gene_idx].telescope_used << std::endl;
	std::cout << std::endl;
}
